#!/bin/bash
# Copyright 2019 The Tranquility Base Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

function create_configuration {
  echo "Welcome to Tranquility Base! This tool performs the required configuration for Marketplace deployment."
  echo
  echo "You are about to upgrade the Service Account [${SA_EMAIL}] in use by this VM and activate several API's:"
  echo
  echo "1. Permissions of the Service Account:"
  echo "  - at the project level [${PROJECT_ID}]"
  echo "    - compute.admin"
  echo "    - storage.admin"
  echo "  - at the folder level [${FOLDER_ID}]"
  echo "    - resourcemanager.folderAdmin"
  echo "    - resourcemanager.projectCreator"
  echo "    - resourcemanager.projectDeleter"
  echo "    - compute.networkAdmin"
  echo "    - compute.xpnAdmin"
#  echo "    - owner"
  echo "  - at the billing account level [${BILLING_ID}]"
  echo "    - billing.admin"
  echo "2.Activation of the following API's:"
  echo "  - appengine.googleapis.com"
  echo "  - bigquery-json.googleapis.com"
  echo "  - bigquerystorage.googleapis.com"
  echo "  - cloudbilling.googleapis.com"
  echo "  - cloudkms.googleapis.com"
  echo "  - cloudresourcemanager.googleapis.com"
  echo "  - compute.googleapis.com"
  echo "  - container.googleapis.com"
  echo "  - containerregistry.googleapis.com"
  echo "  - datastore.googleapis.com"
  echo "  - iap.googleapis.com"
  echo "  - iam.googleapis.com"
  echo "  - iamcredentials.googleapis.com"
  echo "  - logging.googleapis.com"
  echo "  - oslogin.googleapis.com"
  echo "  - pubsub.googleapis.com"
  echo "  - serviceusage.googleapis.com"
  echo "  - sourcerepo.googleapis.com"
  echo "  - sqladmin.googleapis.com"
  echo "  - storage-api.googleapis.com"
  echo
  # Ask for confirmation
  read -p "Press Y to continue or any other key to abort: " -n 1 -r
  echo
  if [[ $REPLY != "Y" ]]
  then
    echo "Aborting..."
    exit 0
  fi

  # Upgrading service account
  echo "Upgrading service account [${SA_EMAIL}]..."
  #Add permissions at the project level
  echo "Adding permissions at the project level... "
  gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.instanceAdmin.v1 --format=none
#  gcloud projects add-iam-policy-binding "${PROJECT_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/storage.admin --format=none

  # Add permissions at the folder level
  echo "Adding permissions at the folder level..."
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.folderAdmin --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectCreator --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/resourcemanager.projectDeleter --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/billing.projectManager --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.networkAdmin --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/compute.xpnAdmin --format=none
  gcloud resource-manager folders add-iam-policy-binding "${FOLDER_ID}" --member=serviceAccount:"${SA_EMAIL}" --role=roles/owner --format=none

  # Add permissions at the billing level
  echo "Adding permissions at the billing account level..."
  gcloud beta billing accounts get-iam-policy "${BILLING_ID}" > billing.yaml
  sa="\ \ - serviceAccount:${SA_EMAIL}"
  sed "/billing.admin/i ${sa}" billing.yaml > billing2.yaml
  gcloud beta billing accounts set-iam-policy "${BILLING_ID}" billing2.yaml --format=none
  rm billing.yaml billing2.yaml

  #Activate essential APIs
  echo "Activating essential APIs..."
  gcloud --project "${PROJECT_ID}" services enable appengine.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable bigquery-json.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable bigquerystorage.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable cloudbilling.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable cloudkms.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable cloudresourcemanager.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable compute.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable container.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable containerregistry.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable datastore.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable iap.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable iam.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable iamcredentials.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable logging.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable oslogin.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable pubsub.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable serviceusage.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable sourcerepo.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable sqladmin.googleapis.com
  gcloud --project "${PROJECT_ID}" services enable storage-api.googleapis.com
  echo "Essential APIs acitvated."
  echo
  echo "Configuration completed!"
  echo "You can now deploy Tranquility Base from Marketplace in project [${PROJECT_ID}]."
  echo
}

function deploy_landing_zone {
  MAX_ATTEMPTS=10
  MAX_ATTEMPTS_INIT=3
  DELAY_BETWEEN_ATTEMPTS=60

  export HOME=/root

  # The deployment will be done using the boostrap SA
  echo "Setting [${SA_EMAIL}] as active account"
  gcloud config set account ${SA_EMAIL}

  # Create TF state bucket
  echo "Creating Terraform bucket state [${terraform_state_bucket_name}]"
  gsutil mb gs://${terraform_state_bucket_name}/

  echo "Terraform initialising..."
  apply_failures=0
  while [ $apply_failures -lt $MAX_ATTEMPTS_INIT ]; do
    terraform init -backend-config="bucket=${terraform_state_bucket_name}" -backend-config="prefix=landingZone"
    if [ $? -eq 0 ]; then
      echo "Terraform initialised successfully"
      break
    fi
    if [ $((apply_failures +1)) -eq $MAX_ATTEMPTS_INIT ]; then
      echo "Maximum of $MAX_ATTEMPTS_INIT reached. Aborting..."
      exit 1;
#      break
    fi
    echo "Terraform init failed."
    apply_failures=$(($apply_failures + 1))
    echo "Retry #$apply_failures starting in $DELAY_BETWEEN_ATTEMPTS seconds."
    sleep $DELAY_BETWEEN_ATTEMPTS
  done

  echo "Terraform applying..."
  apply_failures=0
  while [ $apply_failures -lt $MAX_ATTEMPTS ]; do
    terraform apply -var-file input.tfvars -auto-approve
    if [ $? -eq 0 ]; then
      echo "Landing Zone successfully deployed."
      break
    fi
    if [ $((apply_failures +1)) -eq $MAX_ATTEMPTS ]; then
      echo "Maximum of $MAX_ATTEMPTS reached. Aborting..."
      exit 1;
    fi
    echo "Landing Zone deployment failed."
    apply_failures=$(($apply_failures + 1))
    echo "Retry #$apply_failures starting in $DELAY_BETWEEN_ATTEMPTS seconds."
    sleep $DELAY_BETWEEN_ATTEMPTS
  done

  # Commit current TB terraform code to GCR
  echo "Committing current TB terraform code to GCR..."
  cd /tmp
  gcloud source repos create tb-terraform-code
  gcloud source repos clone tb-terraform-code
  cd /tmp/tb-terraform-code
  rsync -a /opt/tb/repo/ .
  git init
  git add .
  git commit -m "Landing zone terraform script"
  git push -u origin master
}

function print_help() {
  echo "List of supported commands: "
  echo "  'tb-welcome.sh init': Run this to get started and to create the initial configuration or deploy the Landing Zone"
  echo "  'tb-welcome.sh config' Run this to create the initial configuration"
  echo "  'tb-welcome.sh deploy' Run this to deploy the Landing Zone"
}

function init() {
  echo "Welcome to Tranquility Base! This tool performs the required configuration for Marketplace deployment."
  echo
  echo "Chose between one of these two options:"
  echo " [1] Upgrade the Service Account in use by this VM and activate several APIs in the project. (You"
  echo "     will need authentication to gcloud as owner of the Folder, or Organisation, where Tranquility"
  echo "     Base will be deployed. If not, exit this configuration and execute 'gcloud auth login' to do so)"
  echo " [2] Deploy Landing Zone (if you have already run step [1])"

  read varname

  if [ "$varname" == "1" ]
  then
    create_configuration
  elif [ "$varname" == "2" ]
  then
    deploy_landing_zone
  else
    echo "Invalid arguments"
    echo "Aborting..."
    exit 0
  fi
}

#Retrieve terraform vars
cd /opt/tb/repo/tb-gcp-tr/landingZone/no-itop
source input.auto.tfvars
#Retrieve project ID
PROJECT_ID=$(curl -s "http://metadata.google.internal/computeMetadata/v1/project/project-id" -H "Metadata-Flavor: Google")
#Initialise variables
SA_NAME="bootstrap-tb-sa"
SA_EMAIL=${SA_NAME}@${PROJECT_ID}.iam.gserviceaccount.com
FOLDER_ID=${root_id}
BILLING_ID=${billing_account_id}

argument=$1

if [ "$argument" == "init" ]
then
  init
elif [ "$argument" == "deploy" ]
then
  deploy_landing_zone
elif [ "$argument" == "config" ]
then
  create_configuration
else
  print_help
fi
